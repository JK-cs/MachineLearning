# -*- coding: utf-8 -*-
"""AS0_Python_basics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OZDTO-27UukTrEb-oDW-SvKptiCF7bHd

Assignment 0: Python Basics

## Problem 1: Selection Sort

아래 selection sort 함수를 구현해보세요. 
YOUR CODE COMES HERE 라는 주석이 있는 곳을 채우면 됩니다.
"""

def selection_sort(arr):
    for i in range(len(arr) - 1):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr

import random
array = [random.randint(0, 20) for _ in range(20)]
print('array: ', array)

array_sorted = selection_sort(array)
print('sorted:', array_sorted)

print()
print('Q: Is the array sorted?')
print('A:', sorted(array) == array_sorted)

"""## Problem 2: Classes

Selection sort, insertion sort, merge sort를 아래 class의 instance method로 구현해 보세요. <br>
YOUR CODE COMES HERE 라는 주석이 있는 곳을 채우면 됩니다.
"""

class Sorter:
    def __init__(self, method):
        self.method = method
        
    @staticmethod
    def of(method):
        return Sorter(method)
        
    def sort(self, arr):
        if self.method == 'selection_sort':
            return self.selection_sort(arr)
        
        elif self.method == 'insertion_sort':
            return self.insertion_sort(arr)
        
        elif self.method == 'merge_sort':
            return self.merge_sort(arr)
        
        else:
            raise ValueError('Unknown method: %s' % method)

    def selection_sort(self, arr):
        for i in range(len(arr) - 1):
            min_idx = i
            for j in range(i+1, len(arr)):
                if arr[j] < arr[min_idx]:
                    min_idx = j
            arr[i], arr[min_idx] = arr[min_idx], arr[i]
        return arr
    
    def insertion_sort(self, arr):
        for end in range(1, len(arr)):
            for i in range(end, 0, -1):
                if arr[i-1] > arr[i]:
                    arr[i-1], arr[i] = arr[i], arr[i-1]            
        return arr
    
    def merge_sort(self, arr):
        if len(arr) < 2:
            return arr

        mid = len(arr) // 2
        low_arr = merge_sort(arr[:mid])
        high_arr = merge_sort(arr[mid:])

        merged_arr = []
        l = h = 0
        while l < len(low_arr) and h < len(high_arr):
            if low_arr[l] < high_arr[h]:
                merged_arr.append(low_arr[l])
                l += 1
            else:
                merged_arr.append(high_arr[h])
                h += 1
        merged_arr += low_arr[l:]
        merged_arr += high_arr[h:]
        return merged_arr

array = [random.randint(0, 20) for _ in range(20)]

algorithms = ['selection_sort', 'insertion_sort', 'merge_sort']
for algorithm in algorithms:
    sorter = Sorter.of(algorithm)
    array_sorted = sorter.sort(array)
    print('%s sorted? %s' % (algorithm, sorted(array) == array_sorted))

